import("//cp.gni")

cp_static_library("cp_builtin") {
  sources = [
    "base/builtin.c",
    "base/builtin.h",
  ]
}

cp_static_library("cp_math") {
  sources = [
    # poly
    "math/poly/factorial.cpp",
    "math/poly/factorial.h",
    "math/poly/poly.hpp",
    "math/poly/polyA.hpp",
    "math/poly/polyFFT.hpp",
    "math/poly/polyMTT.hpp",
    "math/poly/polyNTT.hpp",
    "math/poly/polyOrigin.hpp",
    "math/poly/polyS.hpp",

    "math/binom.hpp",
    "math/matrix.hpp",
    "math/mes.hpp",
    "math/mod.hpp",
    "math/ntt.hpp",
    "math/bigInt.hpp",

    "math/geometry.cpp",
    "math/geometry.h",
    "math/basic.cpp",
    "math/basic.h",
    "math/numberTheory.cpp",
    "math/numberTheory.h",
    "math/fft.cpp",
    "math/fft.h",
    "math/fmt.cpp",
    "math/fmt.h",
    "math/mix.cpp",
    "math/mix.h",
    # all head file
    "math/math.h"
  ]
  include_dirs = [
    ".",
    "src",
  ]
  public_deps = [
    ":cp_builtin"
  ]
}

cp_static_library("cp_ds") {
  sources = [
    "ds/basic.hpp",
    "ds/block.hpp",
    "ds/dsu.hpp",
    "ds/fenwick.hpp",
    "ds/segmentTree.hpp",

    "ds/cdqConquer.cpp",
    "ds/cdqConquer.h",
    "ds/mix.cpp",
    "ds/mix.h",
    # all head file
    "ds/ds.h"
  ]
  public_deps = [
    ":cp_builtin"
  ]
}

cp_static_library("cp_string") {
  sources = [
    "string/automaton.hpp",
    "string/duval.cpp",
    "string/duval.h",
    "string/kmp.cpp",
    "string/kmp.h",
    "string/manacher.cpp",
    "string/manacher.h",
    "string/minPresent.hpp",
    "string/suffixArray.cpp",
    "string/suffixArray.h",
    "string/trie.hpp",
    # all head file
    "string/string.h",
  ]
}

cp_static_library("cp_graph") {
  sources = [
    "graph/circleCount.cpp",
    "graph/circleCount.h",
    "graph/cut.cpp",
    "graph/cut.h",
    "graph/flow.hpp",
    "graph/kosaraju.hpp",
    "graph/lca.hpp",
    "graph/miniSpanTree.cpp",
    "graph/miniSpanTree.h",
    "graph/shortestPath.cpp",
    "graph/shortestPath.h",
    "graph/tour.cpp",
    "graph/tour.h",
    # all head file
    "graph/graph.h",
  ]
}

cp_static_library("cp") {
  sources = [
    "timer.hpp",
    "all.h",
  ]
  public_deps = [
    ":cp_builtin",
    ":cp_math",
    ":cp_ds",
    ":cp_string",
    ":cp_graph",
  ]
}
